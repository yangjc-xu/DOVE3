.
92
+1
=
aqwf
q23r902h38f
ls
?library
knitr::opts_chunk$set(echo = TRUE)
opt <- options()
options(continue="  ", width=70, prompt=" ")
on.exit(options(opt))
library(DOVE3, quietly=TRUE)
build()
build()
load_all("../DOVE3")
knitr::opts_chunk$set(echo = TRUE)
opt <- options()
options(continue="  ", width=70, prompt=" ")
on.exit(options(opt))
library(DOVE3, quietly=TRUE)
data(exampleData)
head(exampleData)
summary(exampleData)
vaccine.knots = list("vac.type1" = c(30),
"vac.type2" = c(30,60),
"vac.type3" = c(30,60))
prior.infection.knots = list("inf.type1" = c(14),
"inf.type2" = c(14))
formula = outcome(subject.id, entry.time, event.time, censor.time) ~
age + gender + priority +
exposure(Vtime, Vtype, infection.time, infection.type)
data = exampleData
result1 = dove3(formula = formula,
data = data,
vaccine_knots = vaccine.knots,
prior_infection_knots = prior.infection.knots)
save(result1, file = "./vignettes/results1.RData")
getwd()
save(result1, file = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/results1.RData")
result1 <- readRDS(file = "result1.RData")
result1$covariates
head(result1$effectiveness[[1]])
result1$plots[[1]]
vaccine.uninfected.knots = list("vac.noinf.type1" = c(30),
"vac.noinf.type2" = c(30,60),
"vac.noinf.type3" = c(30,60))
vaccine.infected.knots = list("vac.noinf.type1" = c(30),
"vac.noinf.type2" = c(60),
"vac.noinf.type3" = c(60))
vaccine.uninfected.knots = list("vac.noinf.type1" = c(30),
"vac.noinf.type2" = c(30,60),
"vac.noinf.type3" = c(30,60))
vaccine.infected.knots = list("vac.noinf.type1" = c(30),
"vac.noinf.type2" = c(60),
"vac.noinf.type3" = c(60))
result2 = dove3(formula = formula,
data = data,
vaccine_infection_interaction = TRUE,
vaccine_uninfected_knots = vaccine.uninfected.knots,
vaccine_infected_knots = vaccine.infected.knots,
prior_infection_knots = prior.infection.knots,
related_vaccine_types = list(c(1,2)))
getwd()
save(result2, file = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/results2.RData")
result2 <- readRDS(file = "results2.RData")
build()
build()
document()
check()
build()
result1
getwd()
ggsave(result1$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot1.pdf")
ggsave(result2$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot2.pdf")
ggsave(result2$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot2.pdf", width = 7, height = 5, units = "in")
ggsave(result1$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot1.pdf", width = 7, height = 5, units = "in")
build()
vaccine.knots = list("vac.type1" = c(30),
"vac.type2" = c(30,60),
"vac.type3" = c(30,60))
prior.infection.knots = list("inf.type1" = c(14),
"inf.type2" = c(14))
formula = outcome(subject.id, entry.time, event.time, censor.time) ~
age + gender + priority +
exposure(Vtime, Vtype, infection.time, infection.type)
data = exampleData
result1 = dove3(formula = formula,
data = data,
vaccine_knots = vaccine.knots,
prior_infection_knots = prior.infection.knots)
getwd()
vaccine.uninfected.knots = list("vac.noinf.type1" = c(30),
"vac.noinf.type2" = c(30,60),
"vac.noinf.type3" = c(30,60))
vaccine.infected.knots = list("vac.noinf.type1" = c(30),
"vac.noinf.type2" = c(60),
"vac.noinf.type3" = c(60))
result2 = dove3(formula = formula,
data = data,
vaccine_infection_interaction = TRUE,
vaccine_uninfected_knots = vaccine.uninfected.knots,
vaccine_infected_knots = vaccine.infected.knots,
prior_infection_knots = prior.infection.knots,
related_vaccine_types = list(c(1,2)))
save(result1, file = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/results1.RData")
save(result2, file = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/results2.RData")
ggsave(result1$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot1.pdf", width = 7, height = 5, units = "in")
ggsave(result2$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot2.pdf", width = 7, height = 5, units = "in")
document()
load_all("../DOVE3")
vaccine.knots = list("vac.type1" = c(30),
"vac.type2" = c(30,60),
"vac.type3" = c(30,60))
prior.infection.knots = list("inf.type1" = c(14),
"inf.type2" = c(14))
formula = outcome(subject.id, entry.time, event.time, censor.time) ~
age + gender + priority +
exposure(Vtime, Vtype, infection.time, infection.type)
data = exampleData
result1 = dove3(formula = formula,
data = data,
vaccine_knots = vaccine.knots,
prior_infection_knots = prior.infection.knots)
vaccine.uninfected.knots = list("vac.noinf.type1" = c(30),
"vac.noinf.type2" = c(30,60),
"vac.noinf.type3" = c(30,60))
vaccine.infected.knots = list("vac.noinf.type1" = c(30),
"vac.noinf.type2" = c(60),
"vac.noinf.type3" = c(60))
result2 = dove3(formula = formula,
data = data,
vaccine_infection_interaction = TRUE,
vaccine_uninfected_knots = vaccine.uninfected.knots,
vaccine_infected_knots = vaccine.infected.knots,
prior_infection_knots = prior.infection.knots,
related_vaccine_types = list(c(1,2)))
save(result1, file = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/results1.RData")
save(result2, file = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/results2.RData")
ggsave(result1$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot1.pdf", width = 10, height = 8, units = "in")
ggsave(result2$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot2.pdf", width = 10, height = 8, units = "in")
load("~/Documents/GitHub/DOVE3/vignettes/results2.RData")
ggsave(result1$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot1.pdf", width = 10, height = 7, units = "in")
ggsave(result2$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot2.pdf", width = 10, height = 7, units = "in")
ggsave(result1$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot1.pdf", width = 7, height = 5, units = "in")
ggsave(result2$plots[[1]], filename = "/Users/jianchen/Documents/GitHub/DOVE3/vignettes/plot2.pdf", width = 7, height = 5, units = "in")
result2$plots[[2]]
build()
build
build()
build()
document()
check()
build()
data("exampleData")
View(exampleData)
tmp = exmapleData[c(5,6),]
tmp = exampleData[c(5,6),]
View(tmp)
exampleData[7:8,]
exampleData[5:6,] = exampleData[7:8,]
exampleData[7:8,] =
tmp
View(exampleData)
exampleData[7:8,] =
exampleData$subject.id[5:8]
exampleData$subject.id[5:8]
exampleData$subject.id[5:8] = c(3,3,4,4)
View(exampleData)
getwd()
save(exampleData, file = "/Users/jianchen/Documents/GitHub/DOVE3/data/exampleData")
document()
build()
save(exampleData, file = "/Users/jianchen/Documents/GitHub/DOVE3/data/exampleData.RData")
document()
build()
build_manual()
library(devtools)
build()
build_manual()
build_readme()
library(DOVE3)
load("/Users/jianchen/Downloads/test_jsn.RData")
load("/Users/jianchen/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/covid project/NC_covid/parallel/first_booster/res_booster_jsn_new_inf14.RData")
View(result)
result
result$vh
View(result$vh)
View(test1$effectiveness[[1]])
View(test1$effectiveness[[2]])
View(test1$effectiveness[[3]])
View(test1$effectiveness[[4]])
library(tidyverse)
setwd("/Users/jianchen/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/covid project/NC_covid/parallel/")
load("first_booster/res_booster_jsn_new_inf14.RData")
start.date = as.Date("20201210", "%Y%m%d")
prop1 = read.csv("SARS-CoV-2_Variant_Proportions.csv") %>%
mutate(Time = substr(Time, 1, 10), published_date = substr(published_date, 1, 10), share = share*100) %>%
mutate(Time = as.Date(Time, "%Y-%m-%d"), published_date = as.Date(published_date, "%Y-%m-%d")) %>%
mutate(Time = as.numeric(difftime(Time, start.date, units="days")), published_date = as.numeric(difftime(published_date, start.date, units="days")))%>%
filter(usa_or_hhsregion == "USA", time_interval == "weekly",
variant %in% c("B.1.1.529", "B.1.617.2", "BA.1.1","BA.2", "BA.2.12.1")) %>%
select(Time, share, variant, published_date) %>%
group_by(Time, variant) %>%
summarise(share = mean(share))%>%
mutate(label = ifelse(variant == "B.1.617.2", "Delta", variant)) %>%
mutate(label = ifelse(label %in% c("BA.2.12.1","BA.2"), "BA.2", label)) %>%
mutate(label = ifelse(label %in% c("Delta","BA.2"), label, "Omicron"))%>%
group_by(Time, label) %>%
summarise(p = sum(share)) %>%
filter(Time >= 500)
prop1 = prop1[order(prop1$Time),]
prop2 = readxl::read_xlsx("proportion_new.xlsx") %>%
mutate(Time = substr(Time, 1, 10), Share = Share*100) %>%
mutate(Time = as.Date(Time, "%Y-%m-%d")) %>%
mutate(Time = as.numeric(difftime(Time, start.date, units="days"))) %>%
filter(Variant != "Other*", Modeltype == "weighted", `Usa Or Hhsregion` == "USA") %>%
mutate(label = ifelse(Variant == "B.1.617.2", "Delta", Variant)) %>%
select(Time, Share, label) %>%
mutate(label = ifelse(label %in% c("BA.2.12.1","BA.2"), "BA.2", label)) %>%
mutate(label = ifelse(label %in% c("Delta","BA.2"), label, "Omicron")) %>%
group_by(Time, label) %>%
summarise(p = sum(Share)) %>%
filter(Time < 500)
prop2 = prop2[order(prop2$Time),]
prop=rbind(prop2, prop1)
tau = 541
cut = c(370,464)
##PFR
month = c("On or before Dec. 15", "After Dec. 15")
vh_pfr = result$vh[,1:2]
vh_pfr = cbind(t=1:(tau+1), result$vh[,1:2])
vh_pfr = as.data.frame(rbind(rep(0,3), vh_pfr))
upper_pfr = rbind(rep(0,2), result$var_upper[,1:2])
lower_pfr = pmax(rbind(rep(0,2), result$var_lower[,1:2]),0)
colnames(vh_pfr) = c("t", month)
vh_pfr = vh_pfr %>%
gather(`On or before Dec. 15`, `After Dec. 15`, key = "Month", value = "vh")
for (i in 1:2) {
index = which(vh_pfr$Month==month[i])
vh_pfr$upper[index] = upper_pfr[,i]
vh_pfr$lower[index] = lower_pfr[,i]
vh_pfr$t[index] = vh_pfr$t[index] + start1[i]
}
vh_pfr = vh_pfr %>%
filter(vh>=0)
p31=ggplot(data = vh_pfr) +
geom_line(aes(x = t/30, y = vh*100, color = Month), size = 0.75) +
geom_ribbon(aes(x = t/30, ymin=lower*100, ymax=upper*100, fill = Month), alpha = 0.3, show.legend = F) +
theme_light() +
labs(x = "Date", y = "Effectiveness (%)", title = "Ad26.COV2.S - BNT162b2 combination versus Ad26.COV2.S\nprimary series only against infection") +
scale_y_continuous(breaks=seq(0, 100, 10),limits = c(-10,100), expand = c(0, 0)) +
#geom_ribbon(data = prop, aes(x = Time/30, ymin=0, ymax=p, fill = label), alpha = 0.15, show.legend = F)+
scale_colour_manual("", values = c("On or before Dec. 15" = "blue", "After Dec. 15" = "red"),
labels = c("On or before Dec. 15", "After Dec. 15"))+
scale_fill_manual("", values = c("On or before Dec. 15" = "blue", "After Dec. 15" = "red",
"Delta" = "grey", "Omicron" = "light blue", "BA.2" = "coral"))+
scale_x_continuous(breaks = seq(234,541,30)/30,
labels = c("Aug. 21", "Sep. 21", "Oct. 21", "Nov. 21", "Dec. 21", "Jan. 22", "Feb. 22", "Mar. 22", "Apr. 22", "May 22", "June 22"),
limits = c(7.8,18), expand = c(0, 0))+
annotate("rect", xmin = 7.8, xmax = cut[1]/30, ymin = -5, ymax = 0, fill = "blue")+
annotate("rect", xmin = cut[1]/30, xmax = cut[2]/30, ymin = -5, ymax = 0, fill = "red")+
annotate("rect", xmin = cut[2]/30, xmax = 18, ymin = -5, ymax = 0, fill = "purple")+
annotate("text", x = (7.8+cut[1]/30)/2, y = -7.5, label = "Delta", color = "blue", size = 6)+
annotate("text", x = (cut[1]/30+18)/2, y = -7.5, label = "Omicron", color = "#990000", size = 6)+
annotate("text", x = (7.8+cut[1]/30)/2, y = -2.5, label = "B.1.617.2", color = "black", size = 6)+
annotate("text", x = (cut[1]/30+cut[2]/30)/2, y = -2.5, label = "BA.1.1/B.1.1.529", color = "black", size = 6)+
annotate("text", x = (cut[2]/30+18)/2, y = -2.5, label = "BA.2/BA.2.12.1", color = "black", size = 6)+
coord_cartesian(ylim = c(-10, 100), clip = "off")+
theme(legend.position = c(0.15,0.93),
legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
legend.key.height = unit(15, "pt"),
legend.key.width = unit(30, "pt"),
axis.title.x = element_blank(),
text = element_text(size = 17),
plot.margin = margin(t=2,2,2,2, "lines"),
title = element_text(size = 22, face = "bold"))
p31
test1$plots[[1]]
test1$plots[[2]]
##MOD
month = c("On or before Dec. 15", "After Dec. 15")
vh_mod = result$vh[,3:4]
vh_mod = cbind(t=1:(tau+1), result$vh[,3:4])
vh_mod = as.data.frame(rbind(rep(0,3), vh_mod))
upper_mod = rbind(rep(0,2), result$var_upper[,3:4])
lower_mod = pmax(rbind(rep(0,2), result$var_lower[,3:4]),0)
colnames(vh_mod) = c("t", month)
vh_mod = vh_mod %>%
gather(`On or before Dec. 15`, `After Dec. 15`, key = "Month", value = "vh")
for (i in 1:2) {
index = which(vh_mod$Month==month[i])
vh_mod$upper[index] = upper_mod[,i]
vh_mod$lower[index] = lower_mod[,i]
vh_mod$t[index] = vh_mod$t[index] + start2[i]
}
vh_mod = vh_mod%>%
filter(vh>=0)
p32=ggplot(data = vh_mod) +
geom_line(aes(x = t/30, y = vh*100, color = Month), size = 0.75) +
geom_ribbon(aes(x = t/30, ymin=lower*100, ymax=upper*100, fill = Month), alpha = 0.3, show.legend = F) +
theme_light() +
labs(x = "Date", y = "Effectiveness (%)", title = "Ad26.COV2.S - mRNA\u00ad1273 combination versus Ad26.COV2.S\nprimary series only against infection") +
scale_y_continuous(breaks=seq(0, 100, 10),limits = c(-10,100), expand = c(0, 0)) +
#geom_ribbon(data = prop, aes(x = Time/30, ymin=0, ymax=p, fill = label), alpha = 0.15, show.legend = F)+
scale_colour_manual("", values = c("On or before Dec. 15" = "blue", "After Dec. 15" = "red"),
labels = c("On or before Dec. 15", "After Dec. 15"))+
scale_fill_manual("", values = c("On or before Dec. 15" = "blue", "After Dec. 15" = "red",
"Delta" = "grey", "Omicron" = "light blue", "BA.2" = "coral"))+
scale_x_continuous(breaks = seq(234,541,30)/30,
labels = c("Aug. 21", "Sep. 21", "Oct. 21", "Nov. 21", "Dec. 21", "Jan. 22", "Feb. 22", "Mar. 22", "Apr. 22", "May 22", "June 22"),
limits = c(7.8,18), expand = c(0, 0))+
annotate("rect", xmin = 7.8, xmax = cut[1]/30, ymin = -5, ymax = 0, fill = "blue")+
annotate("rect", xmin = cut[1]/30, xmax = cut[2]/30, ymin = -5, ymax = 0, fill = "red")+
annotate("rect", xmin = cut[2]/30, xmax = 18, ymin = -5, ymax = 0, fill = "purple")+
annotate("text", x = (7.8+cut[1]/30)/2, y = -7.5, label = "Delta", color = "blue", size = 6)+
annotate("text", x = (cut[1]/30+18)/2, y = -7.5, label = "Omicron", color = "#990000", size = 6)+
annotate("text", x = (7.8+cut[1]/30)/2, y = -2.5, label = "B.1.617.2", color = "black", size = 6)+
annotate("text", x = (cut[1]/30+cut[2]/30)/2, y = -2.5, label = "BA.1.1/B.1.1.529", color = "black", size = 6)+
annotate("text", x = (cut[2]/30+18)/2, y = -2.5, label = "BA.2/BA.2.12.1", color = "black", size = 6)+
coord_cartesian(ylim = c(-10, 100), clip = "off")+
theme(legend.position = c(0.15,0.93),
legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
legend.key.height = unit(15, "pt"),
legend.key.width = unit(30, "pt"),
axis.title.x = element_blank(),
text = element_text(size = 17),
plot.margin = margin(t=2,2,2,2, "lines"),
title = element_text(size = 22, face = "bold"))
p32
test1$plots[[3]]
test1$plots[[4]]
rm(list = ls())
library(data.table)
library(tidyverse)
library(Rcpp)
load("/Users/jianchen/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/covid project/NC_covid/survData_booster_subgroup_inf14.RData")
rm(survData_pfr)
rm(survData_mod)
rm(survData_jsn)
rm(survData_mrna)
library(DOVE3)
load("/Users/jianchen/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/covid project/NC_covid/survData_booster_subgroup_inf14.RData")
rm(survData_jsn, survData_mod, survData_mrna, survData_pfr)
## remove subjects boosted before Sep. 21
process.id = function(tab_input){
tab = tab_input
tab$subject_id = 1:nrow(tab)
unique_id = unique(tab$cluster_id)
unique_id = data.frame(old = unique_id, new = 1:length(unique_id))
tab$cluster_id = unique_id$new[match(tab$cluster_id, unique_id$old)]
return(tab)
}
threshold = as.numeric(difftime(as.Date("20210921", "%Y%m%d"), as.Date("20201210", "%Y%m%d"), units = "days"))
survData_mixed = survData_mixed %>%
filter(booster.time >= threshold)
survData_mixed = process.id(survData_mixed)
## PFR
tau = 541
n = length(unique(survData_mixed$cluster_id))
m = table(survData_mixed$cluster_id)
index_infection4 = which(survData_mixed$cluster_id%in%as.numeric(attr(m, "dimnames")[[1]])[which(m==4)])
index_remove = index_infection4[4*(1:(length(index_infection4)/4))]
survData_mixed = survData_mixed[-index_remove,]
m = table(survData_mixed$cluster_id)
index_infection3 = which(survData_mixed$cluster_id%in%as.numeric(attr(m, "dimnames")[[1]])[which(m==3)])
index_remove = index_infection3[3*(1:(length(index_infection3)/3))]
survData_mixed = survData_mixed[-index_remove,]
m = table(survData_mixed$cluster_id)
table(m)
survData_mixed$GeoRegion = as.factor(survData_mixed$GeoRegion)
survData_mixed$VacRegion = as.factor(survData_mixed$VacRegion)
survData_mixed$booster.type = 1
start.date = as.Date("20201210", "%Y%m%d")
vaccine.uninfected.knots = list("any_no_inf" = c(0.5,1:5)*30)
vaccine.infected.knots = list("any_inf" = c(0.5,1:5)*30)
prior.infection.knots = list("infection" = c(14, c(3,5,9,11,13,15)*30))
View(survData_mixed)
data = survData_mixed
# Fit the simple model without interaction or related vaccine types
formula = outcome(cluster_id, vaccine.time, event.time, censor.time) ~
age + gender + GeoRegion + VacRegion + RaceEth + vaccine.time +
exposure(booster.time, booster.type, infection.time, infection.type)
survData_mixed$infection.type = 1
data = survData_mixed
# Fit the model with interaction between vaccination and prior infection status,
# and impose a constraint on the first pieces of the first two vaccine types.
test2 = dove3(formula = formula,
data = data,
vaccine_infection_interaction = TRUE,
vaccine_uninfected_knots = vaccine.uninfected.knots,
vaccine_infected_knots = vaccine.infected.knots,
prior_infection_knots = prior.infection.knots)
55+36
91/6
data <- read.csv("/Users/jianchen/Dropbox/Yang/UNC/tutor2022/Philly_schools.csv")
a <- mean(data$Assaults)
ele <- data$Assaults %>% filter(data$SCHOOL_LEVEL_NAME=="ELEMENTARY SCHOOL")
mid<- data$Assaults %>% filter(data$SCHOOL_LEVEL_NAME=="MIDDLE SCHOOL")
high<- data$Assaults %>% filter(data$SCHOOL_LEVEL_NAME=="HIGH SCHOOL")
data <- read.csv("/Users/jianchen/Dropbox/Yang/UNC/tutor2022/Philly_schools.csv")
a <- mean(data$Assaults)
library(tidyverse)
View(data)
ele <- data$Assaults %>% filter(SCHOOL_LEVEL_NAME=="ELEMENTARY SCHOOL")
library(tidyverse)
data <- read.csv("/Users/jianchen/Dropbox/Yang/UNC/tutor2022/Philly_schools.csv")
View(data)
data$Assaults
table(data$SCHOOL_LEVEL_NAME)
df = data %>%
group_by(SCHOOL_LEVEL_NAME) %>%
summarise(mean = mean())
df = data %>%
group_by(SCHOOL_LEVEL_NAME) %>%
summarise(mean = mean(Assaults))
View(df)
View(df)
ggplot(data = df) +
geom_histogram(x = SCHOOL_LEVEL_NAME)
View(df)
ggplot(data = df) +
geom_histogram(aes(x = SCHOOL_LEVEL_NAME))
ggplot(data = data) +
geom_histogram(aes(x = SCHOOL_LEVEL_NAME))
ggplot(data = data) +
geom_boxplot(aes(x = SCHOOL_LEVEL_NAME, y = Assaults))
ggplot(data = data) +
geom_boxplot(aes(x = SCHOOL_LEVEL_NAME, y = Assaults)) +
theme_light()
ggplot(data = data) +
geom_boxplot(aes(x = SCHOOL_LEVEL_NAME, y = Assaults)) +
theme_light() +
title("Boxplot")
ggplot(data = data) +
geom_boxplot(aes(x = SCHOOL_LEVEL_NAME, y = Assaults)) +
theme_light()
ggplot(data = data) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME, y = Assaults)) +
theme_light()
ggplot(data = data) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME, y = mean(Assaults))) +
theme_light()
ggplot(data = data) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME)) +
theme_light()
df = data %>%
group_by(SCHOOL_LEVEL_NAME) %>%
summarise(mean = mean(Assaults))
View(df)
ggplot(data = data) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME)) +
theme_light()
ggplot(data = df) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME)) +
theme_light()
?geom_bar
ggplot(data = df) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME), stat = "identity") +
theme_light()
ggplot(data = df) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME), stat = "bin") +
theme_light()
ggplot(data = df) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME), stat = "identity") +
theme_light()
ggplot(data = df) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME, y =  Assaults), stat = "identity") +
theme_light()
ggplot(data = df) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME, y =  mean()), stat = "identity") +
theme_light()
ggplot(data = df) +
geom_bar(aes(x = SCHOOL_LEVEL_NAME, y =  mean), stat = "identity") +
theme_light()
View(df)
qnorm(2.15)
pnorm(2.15)
pnorm(2.15, mean = 0, sd = 1)
quit()
q()
library(devtools)
build()
test()
document()
build()
document()
build()
document()
build()
TRUE*1
2-TRUE
library(devtools)
document()
build()
document()
build()
build()
document()
build()
document()
build()
document()
build()
document()
build()
document()
build()
document()
build()
